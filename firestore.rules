/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data under the `/users/{userId}` path.
 * Only the authenticated user can read or write their own profile data.
 *
 * Data Structure:
 * All user data is stored under the `/users/{userId}` collection. Each document represents a single user profile.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Data shape is not strictly enforced in this prototyping phase, but ownership is strictly validated.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * The `uid` field within the `/users/{userId}` document is used to validate ownership. This avoids the need for complex queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (get) Authenticated user can get their own profile.
     * @deny (delete) No one can delete a user profile through the rules.
     * @deny (list) Listing all users is not allowed.
     * @deny (create) Cannot create a user profile with mismatched uid.
     * @deny (update) Cannot update a user profile with mismatched uid.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document.
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if false;
    }
  }
}