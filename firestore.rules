/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for the /users/{userId} collection.
 *
 * Data Structure:
 * - All user data is stored under the /users/{userId} path.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing all users is disallowed.
 * - Data shape is not strictly validated to allow for rapid prototyping, but ownership is strictly enforced.
 *
 * Denormalization for Authorization:
 * - The userId is derived directly from the path `/users/{userId}`, so no denormalization is required.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user with ID matching the document ID can create their profile.
     * @allow (update) Signed-in user with ID matching the document ID can update their profile.
     * @allow (get) Signed-in user with ID matching the document ID can get their profile.
     * @deny (create) Signed-in user with ID not matching the document ID cannot create the profile.
     * @deny (update) Signed-in user with ID not matching the document ID cannot update the profile.
     * @deny (delete) Signed-in user with ID not matching the document ID cannot delete the profile.
     * @deny (list) No one can list all user profiles.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user is signed in, is the owner of the document, and the document exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Read permissions
      allow get: if isOwner(userId);
      allow list: if false;

      // Write permissions
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}